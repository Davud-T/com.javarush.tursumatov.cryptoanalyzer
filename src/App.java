import java.io.File;
import java.nio.file.Paths;
import java.util.Scanner;

public class App {
    public static void main(String[] args) {
        Scanner console = new Scanner(System.in);
        Encryptor encryptor = new Encryptor();
        Validate validate = new Validate();
        BruteForce bruteForce = new BruteForce();
        StatAnalyze statAnalyze = new StatAnalyze();

        while (true) {
            System.out.println("–®–ò–§–† –¶–ï–ó–ê–†–Ø \uD83D\uDD12\uD83D\uDD11\uD83C\uDFDB\uFE0F\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é: \uD83D\uDE0A");
            System.out.println("1. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ \uD83D\uDD12");
            System.out.println("2. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞ \uD83D\uDD13");
            System.out.println("3. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é brute force \uD83D\uDD11");
            System.out.println("4. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ \uD83E\uDDE0");
            System.out.println("0. –í—ã—Ö–æ–¥ \uD83D\uDEAA");
            String choice = console.nextLine();

            switch (choice) {
                case "1":
                    String filePathToEncrypt = getValidFilePath(validate, console, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: \uD83D\uDCC4");
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ): \uD83D\uDD11");
                    int key = validate.keyInt(console);
                    String directoryPathEncrypt = getValidDirectoryPath(validate, console, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: \uD83D\uDCC1");
                    String inputFileNameEncrypt = new File(filePathToEncrypt).getName();
                    String outputFileNameEncrypt = inputFileNameEncrypt.substring(0, inputFileNameEncrypt.lastIndexOf('.')) + "_encrypted.txt";
                    String outputFilePathEncrypt = Paths.get(directoryPathEncrypt, outputFileNameEncrypt).toAbsolutePath().toString();
                    validate.processFile(filePathToEncrypt, outputFilePathEncrypt, key, encryptor, true);
                    System.out.println("–¢–µ–∫—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: " + outputFilePathEncrypt);
                    break;

                case "2":
                    String filePathToDecrypt = getValidFilePath(validate, console, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: \uD83D\uDCC4");
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ): \uD83D\uDD11");
                    key = validate.keyInt(console);
                    String directoryPathDecrypt = getValidDirectoryPath(validate, console, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: \uD83D\uDCC1");
                    String inputFileNameDecrypt = new File(filePathToDecrypt).getName();
                    String outputFileNameDecrypt = inputFileNameDecrypt.substring(0, inputFileNameDecrypt.lastIndexOf('.')) + "_decrypted.txt";
                    String outputFilePathDecrypt = Paths.get(directoryPathDecrypt, outputFileNameDecrypt).toAbsolutePath().toString();
                    validate.processFile(filePathToDecrypt, outputFilePathDecrypt, key, encryptor, false);
                    System.out.println("–¢–µ–∫—Å—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: " + outputFilePathDecrypt);
                    break;

                case "3":
                    String filePathToBruteForce = getValidFilePath(validate, console, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –≤–∑–ª–æ–º–∞: \uD83D\uDCC4");
                    String directoryPath = getValidDirectoryPath(validate, console, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º –∫–ª—é—á–µ–π: \uD83D\uDCC1");
                    bruteForce.bruteForceFile(filePathToBruteForce, directoryPath);
                    break;

                case "4":
                    String filePathToAnalyze = getValidFilePath(validate, console, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: üìÑ");
                    String directoryPathAnalyze = getValidDirectoryPath(validate, console, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: üìÅ");
                    String inputFileNameAnalyze = new File(filePathToAnalyze).getName();
                    String outputFileNameAnalyze = inputFileNameAnalyze.substring(0, inputFileNameAnalyze.lastIndexOf('.')) + "_analyzed.txt";
                    String outputFilePathAnalyze = Paths.get(directoryPathAnalyze, outputFileNameAnalyze).toAbsolutePath().toString();
                    statAnalyze.analyzeFile(filePathToAnalyze, outputFilePathAnalyze);
                    break;

                case "0":
                    System.out.println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã. \uD83D\uDC4B");
                    console.close();
                    return;

                default:
                    System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†\uFE0F");
            }
        }
    }

    private static String getValidFilePath(Validate validate, Scanner scanner, String message) {
        String filePath;
        while (true) {
            System.out.println(message);
            filePath = scanner.nextLine();
            if (validate.checkFile(filePath)) {
                break;
            } else {
                System.out.println("–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
        return filePath;
    }

    private static String getValidDirectoryPath(Validate validate, Scanner scanner, String message) {
        String directoryPath;
        while (true) {
            System.out.println(message);
            directoryPath = scanner.nextLine();
            if (validate.checkDirectory(directoryPath)) {
                break;
            } else {
                System.out.println("–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
        return directoryPath;
    }
}